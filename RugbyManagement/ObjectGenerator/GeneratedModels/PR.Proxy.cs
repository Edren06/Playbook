using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using System.Linq;

// SqlProxyClassGen: This code was auto-generated by a tool.
// Generated on 2023/02/10 13:59:10.
namespace RugbyManagement
{
    public partial class DbObjects
    {
		#region Header
		public string ConnectionString;

		public static int _ConnectionTimeout = 30;
		public int ConnectionTimeout
		{
			get
			{
				return _ConnectionTimeout;
			}
			set
			{
				_ConnectionTimeout = value;
			}
		}

		public DbObjects(string connectionString)
		{
			this.ConnectionString = connectionString;
		}
		#endregion Header
		#region GetPlayer

        public List<GetPlayerResult> GetPlayer
		(
             System.Int32? @PlayerId, ref System.Int32? @retval
		)
		{
			return GetPlayer
			(
				this.ConnectionString,
				 @PlayerId, ref @retval
			);
		}
        public List<GetPlayerResult> GetPlayer
		(
             System.Int32? @PlayerId
		)
		{
			int? retval = 0;			
			return GetPlayer
			(
				this.ConnectionString,
				 @PlayerId, ref @retval
			);
		}
		public static List<GetPlayerResult> GetPlayer
        (
            string connectionString,
             System.Int32? @PlayerId, ref System.Int32? @retval
        ) {
            using(SqlConnection _con = new SqlConnection(connectionString))
                using(SqlCommand _cmd = new SqlCommand())
                {
                    _cmd.CommandText = "GetPlayer";
                    _cmd.CommandType = CommandType.StoredProcedure;
					_cmd.CommandTimeout = _ConnectionTimeout;
                    _cmd.Connection = _con;                    
                    _cmd.Parameters.Add(new SqlParameter()
                    {
                        ParameterName = "@PlayerId"
                        ,SqlDbType = SqlDbType.Int
                        ,Size = 4
                        ,IsNullable = true
                        ,Value = @PlayerId
                        ,Direction = ParameterDirection.Input
                    });
                    _cmd.Parameters.Add(new SqlParameter()
                    {
                        ParameterName = "@retval"
                        ,SqlDbType = SqlDbType.Int
                        ,Size = 0
                        ,IsNullable = true
                        ,Value = @retval
                        ,Direction = ParameterDirection.ReturnValue
                    });

                    _con.Open();

                    SqlCommand arithCommand = new SqlCommand("SET ARITHABORT ON", _con);
                    arithCommand.ExecuteNonQuery();

                    var reader = _cmd.ExecuteReader();
                    var result = new List<GetPlayerResult>();
                    while(reader.Read())
                    {
                        var item = new GetPlayerResult()
                        {
                            PlayerId = (System.Int32) (reader["PlayerId"].GetType() == typeof(System.DBNull) ? null : reader["PlayerId"]),
                            FirstName = (System.String) (reader["FirstName"].GetType() == typeof(System.DBNull) ? null : reader["FirstName"]),
                            Surname = (System.String) (reader["Surname"].GetType() == typeof(System.DBNull) ? null : reader["Surname"]),
                            HeightInCm = (System.Decimal?) (reader["HeightInCm"].GetType() == typeof(System.DBNull) ? null : reader["HeightInCm"]),
                            DateOfBirth = (System.DateTime?) (reader["DateOfBirth"].GetType() == typeof(System.DBNull) ? null : reader["DateOfBirth"]),
                            TeamID = (System.Int32?) (reader["TeamID"].GetType() == typeof(System.DBNull) ? null : reader["TeamID"]),
                            TeamName = (System.String) (reader["TeamName"].GetType() == typeof(System.DBNull) ? null : reader["TeamName"]),
                            StadiumId = (System.Int32?) (reader["StadiumId"].GetType() == typeof(System.DBNull) ? null : reader["StadiumId"]),
                            StadiumName = (System.String) (reader["StadiumName"].GetType() == typeof(System.DBNull) ? null : reader["StadiumName"])
                        };
                        result.Add(item);
                    }
                    _con.Close();
                    @retval = (System.Int32?) (_cmd.Parameters["@retval"].Value.GetType() == typeof(System.DBNull) ? null : _cmd.Parameters["@retval"].Value);

                    return result;
                }
        }

		#endregion GetPlayer


				public List<GetPlayerResult> GetPlayer
        (
            object model
        ) {
            using(SqlConnection _con = new SqlConnection(ConnectionString))
                using(SqlCommand _cmd = new SqlCommand())
                {

                var type = model.GetType();
                var properties = type.GetProperties().ToList();

					_cmd.CommandTimeout = this.ConnectionTimeout;
                    _cmd.CommandText = "GetPlayer";
                    _cmd.CommandType = CommandType.StoredProcedure;
                    _cmd.Connection = _con;                    
                    _cmd.Parameters.Add(new SqlParameter()
                    {
                        ParameterName = "@PlayerId"
                        ,SqlDbType = SqlDbType.Int
                        ,Size = 4
                        ,IsNullable = true
                        ,Value = properties.Where(x => x.Name == "@PlayerId".Replace("@","")).SingleOrDefault() != null ? properties.Where(x => x.Name == "@PlayerId".Replace("@","")).SingleOrDefault().GetValue(model) : null
                        ,Direction = ParameterDirection.Input
                    });
                    _cmd.Parameters.Add(new SqlParameter()
                    {
                        ParameterName = "@retval"
                        ,SqlDbType = SqlDbType.Int
                        ,Size = 0
                        ,IsNullable = true
                        ,Value = properties.Where(x => x.Name == "@retval".Replace("@","")).SingleOrDefault() != null ? properties.Where(x => x.Name == "@retval".Replace("@","")).SingleOrDefault().GetValue(model) : null
                        ,Direction = ParameterDirection.ReturnValue
                    });


                    _con.Open();

                    SqlCommand arithCommand = new SqlCommand("SET ARITHABORT ON", _con);
                    arithCommand.ExecuteNonQuery();

                    var reader = _cmd.ExecuteReader();
                    var result = new List<GetPlayerResult>();
                    while(reader.Read())
                    {
                        var item = new GetPlayerResult()
                        {
                            PlayerId = (System.Int32) (reader["PlayerId"].GetType() == typeof(System.DBNull) ? null : reader["PlayerId"]),
                            FirstName = (System.String) (reader["FirstName"].GetType() == typeof(System.DBNull) ? null : reader["FirstName"]),
                            Surname = (System.String) (reader["Surname"].GetType() == typeof(System.DBNull) ? null : reader["Surname"]),
                            HeightInCm = (System.Decimal?) (reader["HeightInCm"].GetType() == typeof(System.DBNull) ? null : reader["HeightInCm"]),
                            DateOfBirth = (System.DateTime?) (reader["DateOfBirth"].GetType() == typeof(System.DBNull) ? null : reader["DateOfBirth"]),
                            TeamID = (System.Int32?) (reader["TeamID"].GetType() == typeof(System.DBNull) ? null : reader["TeamID"]),
                            TeamName = (System.String) (reader["TeamName"].GetType() == typeof(System.DBNull) ? null : reader["TeamName"]),
                            StadiumId = (System.Int32?) (reader["StadiumId"].GetType() == typeof(System.DBNull) ? null : reader["StadiumId"]),
                            StadiumName = (System.String) (reader["StadiumName"].GetType() == typeof(System.DBNull) ? null : reader["StadiumName"])
                        };
                        result.Add(item);
                    }
                    _con.Close();

						if(properties.Where(x => x.Name == "@retval".Replace("@","")).SingleOrDefault() != null)
						{
							properties.Where(x => x.Name == "@retval".Replace("@","")).SingleOrDefault().SetValue(model, (System.Int32?)_cmd.Parameters["@retval"].Value);
						}

                    return result;
                }
        }

		#region GetStadium

        public List<GetStadiumResult> GetStadium
		(
             System.Int32? @StadiumId, ref System.Int32? @retval
		)
		{
			return GetStadium
			(
				this.ConnectionString,
				 @StadiumId, ref @retval
			);
		}
        public List<GetStadiumResult> GetStadium
		(
             System.Int32? @StadiumId
		)
		{
			int? retval = 0;			
			return GetStadium
			(
				this.ConnectionString,
				 @StadiumId, ref @retval
			);
		}
		public static List<GetStadiumResult> GetStadium
        (
            string connectionString,
             System.Int32? @StadiumId, ref System.Int32? @retval
        ) {
            using(SqlConnection _con = new SqlConnection(connectionString))
                using(SqlCommand _cmd = new SqlCommand())
                {
                    _cmd.CommandText = "GetStadium";
                    _cmd.CommandType = CommandType.StoredProcedure;
					_cmd.CommandTimeout = _ConnectionTimeout;
                    _cmd.Connection = _con;                    
                    _cmd.Parameters.Add(new SqlParameter()
                    {
                        ParameterName = "@StadiumId"
                        ,SqlDbType = SqlDbType.Int
                        ,Size = 4
                        ,IsNullable = true
                        ,Value = @StadiumId
                        ,Direction = ParameterDirection.Input
                    });
                    _cmd.Parameters.Add(new SqlParameter()
                    {
                        ParameterName = "@retval"
                        ,SqlDbType = SqlDbType.Int
                        ,Size = 0
                        ,IsNullable = true
                        ,Value = @retval
                        ,Direction = ParameterDirection.ReturnValue
                    });

                    _con.Open();

                    SqlCommand arithCommand = new SqlCommand("SET ARITHABORT ON", _con);
                    arithCommand.ExecuteNonQuery();

                    var reader = _cmd.ExecuteReader();
                    var result = new List<GetStadiumResult>();
                    while(reader.Read())
                    {
                        var item = new GetStadiumResult()
                        {
                            StadiumId = (System.Int32) (reader["StadiumId"].GetType() == typeof(System.DBNull) ? null : reader["StadiumId"]),
                            Name = (System.String) (reader["Name"].GetType() == typeof(System.DBNull) ? null : reader["Name"]),
                            Location = (System.String) (reader["Location"].GetType() == typeof(System.DBNull) ? null : reader["Location"])
                        };
                        result.Add(item);
                    }
                    _con.Close();
                    @retval = (System.Int32?) (_cmd.Parameters["@retval"].Value.GetType() == typeof(System.DBNull) ? null : _cmd.Parameters["@retval"].Value);

                    return result;
                }
        }

		#endregion GetStadium


				public List<GetStadiumResult> GetStadium
        (
            object model
        ) {
            using(SqlConnection _con = new SqlConnection(ConnectionString))
                using(SqlCommand _cmd = new SqlCommand())
                {

                var type = model.GetType();
                var properties = type.GetProperties().ToList();

					_cmd.CommandTimeout = this.ConnectionTimeout;
                    _cmd.CommandText = "GetStadium";
                    _cmd.CommandType = CommandType.StoredProcedure;
                    _cmd.Connection = _con;                    
                    _cmd.Parameters.Add(new SqlParameter()
                    {
                        ParameterName = "@StadiumId"
                        ,SqlDbType = SqlDbType.Int
                        ,Size = 4
                        ,IsNullable = true
                        ,Value = properties.Where(x => x.Name == "@StadiumId".Replace("@","")).SingleOrDefault() != null ? properties.Where(x => x.Name == "@StadiumId".Replace("@","")).SingleOrDefault().GetValue(model) : null
                        ,Direction = ParameterDirection.Input
                    });
                    _cmd.Parameters.Add(new SqlParameter()
                    {
                        ParameterName = "@retval"
                        ,SqlDbType = SqlDbType.Int
                        ,Size = 0
                        ,IsNullable = true
                        ,Value = properties.Where(x => x.Name == "@retval".Replace("@","")).SingleOrDefault() != null ? properties.Where(x => x.Name == "@retval".Replace("@","")).SingleOrDefault().GetValue(model) : null
                        ,Direction = ParameterDirection.ReturnValue
                    });


                    _con.Open();

                    SqlCommand arithCommand = new SqlCommand("SET ARITHABORT ON", _con);
                    arithCommand.ExecuteNonQuery();

                    var reader = _cmd.ExecuteReader();
                    var result = new List<GetStadiumResult>();
                    while(reader.Read())
                    {
                        var item = new GetStadiumResult()
                        {
                            StadiumId = (System.Int32) (reader["StadiumId"].GetType() == typeof(System.DBNull) ? null : reader["StadiumId"]),
                            Name = (System.String) (reader["Name"].GetType() == typeof(System.DBNull) ? null : reader["Name"]),
                            Location = (System.String) (reader["Location"].GetType() == typeof(System.DBNull) ? null : reader["Location"])
                        };
                        result.Add(item);
                    }
                    _con.Close();

						if(properties.Where(x => x.Name == "@retval".Replace("@","")).SingleOrDefault() != null)
						{
							properties.Where(x => x.Name == "@retval".Replace("@","")).SingleOrDefault().SetValue(model, (System.Int32?)_cmd.Parameters["@retval"].Value);
						}

                    return result;
                }
        }

		#region GetTeam

        public List<GetTeamResult> GetTeam
		(
             System.Int32? @TeamId, ref System.Int32? @retval
		)
		{
			return GetTeam
			(
				this.ConnectionString,
				 @TeamId, ref @retval
			);
		}
        public List<GetTeamResult> GetTeam
		(
             System.Int32? @TeamId
		)
		{
			int? retval = 0;			
			return GetTeam
			(
				this.ConnectionString,
				 @TeamId, ref @retval
			);
		}
		public static List<GetTeamResult> GetTeam
        (
            string connectionString,
             System.Int32? @TeamId, ref System.Int32? @retval
        ) {
            using(SqlConnection _con = new SqlConnection(connectionString))
                using(SqlCommand _cmd = new SqlCommand())
                {
                    _cmd.CommandText = "GetTeam";
                    _cmd.CommandType = CommandType.StoredProcedure;
					_cmd.CommandTimeout = _ConnectionTimeout;
                    _cmd.Connection = _con;                    
                    _cmd.Parameters.Add(new SqlParameter()
                    {
                        ParameterName = "@TeamId"
                        ,SqlDbType = SqlDbType.Int
                        ,Size = 4
                        ,IsNullable = true
                        ,Value = @TeamId
                        ,Direction = ParameterDirection.Input
                    });
                    _cmd.Parameters.Add(new SqlParameter()
                    {
                        ParameterName = "@retval"
                        ,SqlDbType = SqlDbType.Int
                        ,Size = 0
                        ,IsNullable = true
                        ,Value = @retval
                        ,Direction = ParameterDirection.ReturnValue
                    });

                    _con.Open();

                    SqlCommand arithCommand = new SqlCommand("SET ARITHABORT ON", _con);
                    arithCommand.ExecuteNonQuery();

                    var reader = _cmd.ExecuteReader();
                    var result = new List<GetTeamResult>();
                    while(reader.Read())
                    {
                        var item = new GetTeamResult()
                        {
                            TeamId = (System.Int32) (reader["TeamId"].GetType() == typeof(System.DBNull) ? null : reader["TeamId"]),
                            Name = (System.String) (reader["Name"].GetType() == typeof(System.DBNull) ? null : reader["Name"]),
                            StadiumId = (System.Int32?) (reader["StadiumId"].GetType() == typeof(System.DBNull) ? null : reader["StadiumId"]),
                            StadiumName = (System.String) (reader["StadiumName"].GetType() == typeof(System.DBNull) ? null : reader["StadiumName"])
                        };
                        result.Add(item);
                    }
                    _con.Close();
                    @retval = (System.Int32?) (_cmd.Parameters["@retval"].Value.GetType() == typeof(System.DBNull) ? null : _cmd.Parameters["@retval"].Value);

                    return result;
                }
        }

		#endregion GetTeam


				public List<GetTeamResult> GetTeam
        (
            object model
        ) {
            using(SqlConnection _con = new SqlConnection(ConnectionString))
                using(SqlCommand _cmd = new SqlCommand())
                {

                var type = model.GetType();
                var properties = type.GetProperties().ToList();

					_cmd.CommandTimeout = this.ConnectionTimeout;
                    _cmd.CommandText = "GetTeam";
                    _cmd.CommandType = CommandType.StoredProcedure;
                    _cmd.Connection = _con;                    
                    _cmd.Parameters.Add(new SqlParameter()
                    {
                        ParameterName = "@TeamId"
                        ,SqlDbType = SqlDbType.Int
                        ,Size = 4
                        ,IsNullable = true
                        ,Value = properties.Where(x => x.Name == "@TeamId".Replace("@","")).SingleOrDefault() != null ? properties.Where(x => x.Name == "@TeamId".Replace("@","")).SingleOrDefault().GetValue(model) : null
                        ,Direction = ParameterDirection.Input
                    });
                    _cmd.Parameters.Add(new SqlParameter()
                    {
                        ParameterName = "@retval"
                        ,SqlDbType = SqlDbType.Int
                        ,Size = 0
                        ,IsNullable = true
                        ,Value = properties.Where(x => x.Name == "@retval".Replace("@","")).SingleOrDefault() != null ? properties.Where(x => x.Name == "@retval".Replace("@","")).SingleOrDefault().GetValue(model) : null
                        ,Direction = ParameterDirection.ReturnValue
                    });


                    _con.Open();

                    SqlCommand arithCommand = new SqlCommand("SET ARITHABORT ON", _con);
                    arithCommand.ExecuteNonQuery();

                    var reader = _cmd.ExecuteReader();
                    var result = new List<GetTeamResult>();
                    while(reader.Read())
                    {
                        var item = new GetTeamResult()
                        {
                            TeamId = (System.Int32) (reader["TeamId"].GetType() == typeof(System.DBNull) ? null : reader["TeamId"]),
                            Name = (System.String) (reader["Name"].GetType() == typeof(System.DBNull) ? null : reader["Name"]),
                            StadiumId = (System.Int32?) (reader["StadiumId"].GetType() == typeof(System.DBNull) ? null : reader["StadiumId"]),
                            StadiumName = (System.String) (reader["StadiumName"].GetType() == typeof(System.DBNull) ? null : reader["StadiumName"])
                        };
                        result.Add(item);
                    }
                    _con.Close();

						if(properties.Where(x => x.Name == "@retval".Replace("@","")).SingleOrDefault() != null)
						{
							properties.Where(x => x.Name == "@retval".Replace("@","")).SingleOrDefault().SetValue(model, (System.Int32?)_cmd.Parameters["@retval"].Value);
						}

                    return result;
                }
        }

		#region ListPlayers

        public List<ListPlayersResult> ListPlayers
		(
             System.Int32? @TeamId,  System.Int32? @StadiumId, ref System.Int32? @retval
		)
		{
			return ListPlayers
			(
				this.ConnectionString,
				 @TeamId,  @StadiumId, ref @retval
			);
		}
        public List<ListPlayersResult> ListPlayers
		(
             System.Int32? @TeamId,  System.Int32? @StadiumId
		)
		{
			int? retval = 0;			
			return ListPlayers
			(
				this.ConnectionString,
				 @TeamId,  @StadiumId, ref @retval
			);
		}
		public static List<ListPlayersResult> ListPlayers
        (
            string connectionString,
             System.Int32? @TeamId,  System.Int32? @StadiumId, ref System.Int32? @retval
        ) {
            using(SqlConnection _con = new SqlConnection(connectionString))
                using(SqlCommand _cmd = new SqlCommand())
                {
                    _cmd.CommandText = "ListPlayers";
                    _cmd.CommandType = CommandType.StoredProcedure;
					_cmd.CommandTimeout = _ConnectionTimeout;
                    _cmd.Connection = _con;                    
                    _cmd.Parameters.Add(new SqlParameter()
                    {
                        ParameterName = "@TeamId"
                        ,SqlDbType = SqlDbType.Int
                        ,Size = 4
                        ,IsNullable = true
                        ,Value = @TeamId
                        ,Direction = ParameterDirection.Input
                    });
                    _cmd.Parameters.Add(new SqlParameter()
                    {
                        ParameterName = "@StadiumId"
                        ,SqlDbType = SqlDbType.Int
                        ,Size = 4
                        ,IsNullable = true
                        ,Value = @StadiumId
                        ,Direction = ParameterDirection.Input
                    });
                    _cmd.Parameters.Add(new SqlParameter()
                    {
                        ParameterName = "@retval"
                        ,SqlDbType = SqlDbType.Int
                        ,Size = 0
                        ,IsNullable = true
                        ,Value = @retval
                        ,Direction = ParameterDirection.ReturnValue
                    });

                    _con.Open();

                    SqlCommand arithCommand = new SqlCommand("SET ARITHABORT ON", _con);
                    arithCommand.ExecuteNonQuery();

                    var reader = _cmd.ExecuteReader();
                    var result = new List<ListPlayersResult>();
                    while(reader.Read())
                    {
                        var item = new ListPlayersResult()
                        {
                            PlayerId = (System.Int32) (reader["PlayerId"].GetType() == typeof(System.DBNull) ? null : reader["PlayerId"]),
                            FirstName = (System.String) (reader["FirstName"].GetType() == typeof(System.DBNull) ? null : reader["FirstName"]),
                            Surname = (System.String) (reader["Surname"].GetType() == typeof(System.DBNull) ? null : reader["Surname"]),
                            HeightInCm = (System.Decimal?) (reader["HeightInCm"].GetType() == typeof(System.DBNull) ? null : reader["HeightInCm"]),
                            DateOfBirth = (System.DateTime?) (reader["DateOfBirth"].GetType() == typeof(System.DBNull) ? null : reader["DateOfBirth"]),
                            TeamID = (System.Int32?) (reader["TeamID"].GetType() == typeof(System.DBNull) ? null : reader["TeamID"]),
                            TeamName = (System.String) (reader["TeamName"].GetType() == typeof(System.DBNull) ? null : reader["TeamName"]),
                            StadiumId = (System.Int32?) (reader["StadiumId"].GetType() == typeof(System.DBNull) ? null : reader["StadiumId"]),
                            StadiumName = (System.String) (reader["StadiumName"].GetType() == typeof(System.DBNull) ? null : reader["StadiumName"])
                        };
                        result.Add(item);
                    }
                    _con.Close();
                    @retval = (System.Int32?) (_cmd.Parameters["@retval"].Value.GetType() == typeof(System.DBNull) ? null : _cmd.Parameters["@retval"].Value);

                    return result;
                }
        }

		#endregion ListPlayers


				public List<ListPlayersResult> ListPlayers
        (
            object model
        ) {
            using(SqlConnection _con = new SqlConnection(ConnectionString))
                using(SqlCommand _cmd = new SqlCommand())
                {

                var type = model.GetType();
                var properties = type.GetProperties().ToList();

					_cmd.CommandTimeout = this.ConnectionTimeout;
                    _cmd.CommandText = "ListPlayers";
                    _cmd.CommandType = CommandType.StoredProcedure;
                    _cmd.Connection = _con;                    
                    _cmd.Parameters.Add(new SqlParameter()
                    {
                        ParameterName = "@TeamId"
                        ,SqlDbType = SqlDbType.Int
                        ,Size = 4
                        ,IsNullable = true
                        ,Value = properties.Where(x => x.Name == "@TeamId".Replace("@","")).SingleOrDefault() != null ? properties.Where(x => x.Name == "@TeamId".Replace("@","")).SingleOrDefault().GetValue(model) : null
                        ,Direction = ParameterDirection.Input
                    });
                    _cmd.Parameters.Add(new SqlParameter()
                    {
                        ParameterName = "@StadiumId"
                        ,SqlDbType = SqlDbType.Int
                        ,Size = 4
                        ,IsNullable = true
                        ,Value = properties.Where(x => x.Name == "@StadiumId".Replace("@","")).SingleOrDefault() != null ? properties.Where(x => x.Name == "@StadiumId".Replace("@","")).SingleOrDefault().GetValue(model) : null
                        ,Direction = ParameterDirection.Input
                    });
                    _cmd.Parameters.Add(new SqlParameter()
                    {
                        ParameterName = "@retval"
                        ,SqlDbType = SqlDbType.Int
                        ,Size = 0
                        ,IsNullable = true
                        ,Value = properties.Where(x => x.Name == "@retval".Replace("@","")).SingleOrDefault() != null ? properties.Where(x => x.Name == "@retval".Replace("@","")).SingleOrDefault().GetValue(model) : null
                        ,Direction = ParameterDirection.ReturnValue
                    });


                    _con.Open();

                    SqlCommand arithCommand = new SqlCommand("SET ARITHABORT ON", _con);
                    arithCommand.ExecuteNonQuery();

                    var reader = _cmd.ExecuteReader();
                    var result = new List<ListPlayersResult>();
                    while(reader.Read())
                    {
                        var item = new ListPlayersResult()
                        {
                            PlayerId = (System.Int32) (reader["PlayerId"].GetType() == typeof(System.DBNull) ? null : reader["PlayerId"]),
                            FirstName = (System.String) (reader["FirstName"].GetType() == typeof(System.DBNull) ? null : reader["FirstName"]),
                            Surname = (System.String) (reader["Surname"].GetType() == typeof(System.DBNull) ? null : reader["Surname"]),
                            HeightInCm = (System.Decimal?) (reader["HeightInCm"].GetType() == typeof(System.DBNull) ? null : reader["HeightInCm"]),
                            DateOfBirth = (System.DateTime?) (reader["DateOfBirth"].GetType() == typeof(System.DBNull) ? null : reader["DateOfBirth"]),
                            TeamID = (System.Int32?) (reader["TeamID"].GetType() == typeof(System.DBNull) ? null : reader["TeamID"]),
                            TeamName = (System.String) (reader["TeamName"].GetType() == typeof(System.DBNull) ? null : reader["TeamName"]),
                            StadiumId = (System.Int32?) (reader["StadiumId"].GetType() == typeof(System.DBNull) ? null : reader["StadiumId"]),
                            StadiumName = (System.String) (reader["StadiumName"].GetType() == typeof(System.DBNull) ? null : reader["StadiumName"])
                        };
                        result.Add(item);
                    }
                    _con.Close();

						if(properties.Where(x => x.Name == "@retval".Replace("@","")).SingleOrDefault() != null)
						{
							properties.Where(x => x.Name == "@retval".Replace("@","")).SingleOrDefault().SetValue(model, (System.Int32?)_cmd.Parameters["@retval"].Value);
						}

                    return result;
                }
        }

		#region ListTeams

        public List<ListTeamsResult> ListTeams
		(
             System.Int32? @StadiumId, ref System.Int32? @retval
		)
		{
			return ListTeams
			(
				this.ConnectionString,
				 @StadiumId, ref @retval
			);
		}
        public List<ListTeamsResult> ListTeams
		(
             System.Int32? @StadiumId
		)
		{
			int? retval = 0;			
			return ListTeams
			(
				this.ConnectionString,
				 @StadiumId, ref @retval
			);
		}
		public static List<ListTeamsResult> ListTeams
        (
            string connectionString,
             System.Int32? @StadiumId, ref System.Int32? @retval
        ) {
            using(SqlConnection _con = new SqlConnection(connectionString))
                using(SqlCommand _cmd = new SqlCommand())
                {
                    _cmd.CommandText = "ListTeams";
                    _cmd.CommandType = CommandType.StoredProcedure;
					_cmd.CommandTimeout = _ConnectionTimeout;
                    _cmd.Connection = _con;                    
                    _cmd.Parameters.Add(new SqlParameter()
                    {
                        ParameterName = "@StadiumId"
                        ,SqlDbType = SqlDbType.Int
                        ,Size = 4
                        ,IsNullable = true
                        ,Value = @StadiumId
                        ,Direction = ParameterDirection.Input
                    });
                    _cmd.Parameters.Add(new SqlParameter()
                    {
                        ParameterName = "@retval"
                        ,SqlDbType = SqlDbType.Int
                        ,Size = 0
                        ,IsNullable = true
                        ,Value = @retval
                        ,Direction = ParameterDirection.ReturnValue
                    });

                    _con.Open();

                    SqlCommand arithCommand = new SqlCommand("SET ARITHABORT ON", _con);
                    arithCommand.ExecuteNonQuery();

                    var reader = _cmd.ExecuteReader();
                    var result = new List<ListTeamsResult>();
                    while(reader.Read())
                    {
                        var item = new ListTeamsResult()
                        {
                            TeamId = (System.Int32) (reader["TeamId"].GetType() == typeof(System.DBNull) ? null : reader["TeamId"]),
                            Name = (System.String) (reader["Name"].GetType() == typeof(System.DBNull) ? null : reader["Name"]),
                            StadiumId = (System.Int32?) (reader["StadiumId"].GetType() == typeof(System.DBNull) ? null : reader["StadiumId"]),
                            StadiumName = (System.String) (reader["StadiumName"].GetType() == typeof(System.DBNull) ? null : reader["StadiumName"])
                        };
                        result.Add(item);
                    }
                    _con.Close();
                    @retval = (System.Int32?) (_cmd.Parameters["@retval"].Value.GetType() == typeof(System.DBNull) ? null : _cmd.Parameters["@retval"].Value);

                    return result;
                }
        }

		#endregion ListTeams


				public List<ListTeamsResult> ListTeams
        (
            object model
        ) {
            using(SqlConnection _con = new SqlConnection(ConnectionString))
                using(SqlCommand _cmd = new SqlCommand())
                {

                var type = model.GetType();
                var properties = type.GetProperties().ToList();

					_cmd.CommandTimeout = this.ConnectionTimeout;
                    _cmd.CommandText = "ListTeams";
                    _cmd.CommandType = CommandType.StoredProcedure;
                    _cmd.Connection = _con;                    
                    _cmd.Parameters.Add(new SqlParameter()
                    {
                        ParameterName = "@StadiumId"
                        ,SqlDbType = SqlDbType.Int
                        ,Size = 4
                        ,IsNullable = true
                        ,Value = properties.Where(x => x.Name == "@StadiumId".Replace("@","")).SingleOrDefault() != null ? properties.Where(x => x.Name == "@StadiumId".Replace("@","")).SingleOrDefault().GetValue(model) : null
                        ,Direction = ParameterDirection.Input
                    });
                    _cmd.Parameters.Add(new SqlParameter()
                    {
                        ParameterName = "@retval"
                        ,SqlDbType = SqlDbType.Int
                        ,Size = 0
                        ,IsNullable = true
                        ,Value = properties.Where(x => x.Name == "@retval".Replace("@","")).SingleOrDefault() != null ? properties.Where(x => x.Name == "@retval".Replace("@","")).SingleOrDefault().GetValue(model) : null
                        ,Direction = ParameterDirection.ReturnValue
                    });


                    _con.Open();

                    SqlCommand arithCommand = new SqlCommand("SET ARITHABORT ON", _con);
                    arithCommand.ExecuteNonQuery();

                    var reader = _cmd.ExecuteReader();
                    var result = new List<ListTeamsResult>();
                    while(reader.Read())
                    {
                        var item = new ListTeamsResult()
                        {
                            TeamId = (System.Int32) (reader["TeamId"].GetType() == typeof(System.DBNull) ? null : reader["TeamId"]),
                            Name = (System.String) (reader["Name"].GetType() == typeof(System.DBNull) ? null : reader["Name"]),
                            StadiumId = (System.Int32?) (reader["StadiumId"].GetType() == typeof(System.DBNull) ? null : reader["StadiumId"]),
                            StadiumName = (System.String) (reader["StadiumName"].GetType() == typeof(System.DBNull) ? null : reader["StadiumName"])
                        };
                        result.Add(item);
                    }
                    _con.Close();

						if(properties.Where(x => x.Name == "@retval".Replace("@","")).SingleOrDefault() != null)
						{
							properties.Where(x => x.Name == "@retval".Replace("@","")).SingleOrDefault().SetValue(model, (System.Int32?)_cmd.Parameters["@retval"].Value);
						}

                    return result;
                }
        }

		#region ListTransferHistory

        public List<ListTransferHistoryResult> ListTransferHistory
		(
             System.Int32? @PlayerId,  System.Int32? @TeamId,  System.Int32? @StadiumId, ref System.Int32? @retval
		)
		{
			return ListTransferHistory
			(
				this.ConnectionString,
				 @PlayerId,  @TeamId,  @StadiumId, ref @retval
			);
		}
        public List<ListTransferHistoryResult> ListTransferHistory
		(
             System.Int32? @PlayerId,  System.Int32? @TeamId,  System.Int32? @StadiumId
		)
		{
			int? retval = 0;			
			return ListTransferHistory
			(
				this.ConnectionString,
				 @PlayerId,  @TeamId,  @StadiumId, ref @retval
			);
		}
		public static List<ListTransferHistoryResult> ListTransferHistory
        (
            string connectionString,
             System.Int32? @PlayerId,  System.Int32? @TeamId,  System.Int32? @StadiumId, ref System.Int32? @retval
        ) {
            using(SqlConnection _con = new SqlConnection(connectionString))
                using(SqlCommand _cmd = new SqlCommand())
                {
                    _cmd.CommandText = "ListTransferHistory";
                    _cmd.CommandType = CommandType.StoredProcedure;
					_cmd.CommandTimeout = _ConnectionTimeout;
                    _cmd.Connection = _con;                    
                    _cmd.Parameters.Add(new SqlParameter()
                    {
                        ParameterName = "@PlayerId"
                        ,SqlDbType = SqlDbType.Int
                        ,Size = 4
                        ,IsNullable = true
                        ,Value = @PlayerId
                        ,Direction = ParameterDirection.Input
                    });
                    _cmd.Parameters.Add(new SqlParameter()
                    {
                        ParameterName = "@TeamId"
                        ,SqlDbType = SqlDbType.Int
                        ,Size = 4
                        ,IsNullable = true
                        ,Value = @TeamId
                        ,Direction = ParameterDirection.Input
                    });
                    _cmd.Parameters.Add(new SqlParameter()
                    {
                        ParameterName = "@StadiumId"
                        ,SqlDbType = SqlDbType.Int
                        ,Size = 4
                        ,IsNullable = true
                        ,Value = @StadiumId
                        ,Direction = ParameterDirection.Input
                    });
                    _cmd.Parameters.Add(new SqlParameter()
                    {
                        ParameterName = "@retval"
                        ,SqlDbType = SqlDbType.Int
                        ,Size = 0
                        ,IsNullable = true
                        ,Value = @retval
                        ,Direction = ParameterDirection.ReturnValue
                    });

                    _con.Open();

                    SqlCommand arithCommand = new SqlCommand("SET ARITHABORT ON", _con);
                    arithCommand.ExecuteNonQuery();

                    var reader = _cmd.ExecuteReader();
                    var result = new List<ListTransferHistoryResult>();
                    while(reader.Read())
                    {
                        var item = new ListTransferHistoryResult()
                        {
                            PlayerTransferHistoryId = (System.Int32) (reader["PlayerTransferHistoryId"].GetType() == typeof(System.DBNull) ? null : reader["PlayerTransferHistoryId"]),
                            PlayerId = (System.Int32?) (reader["PlayerId"].GetType() == typeof(System.DBNull) ? null : reader["PlayerId"]),
                            FromTeamId = (System.Int32?) (reader["FromTeamId"].GetType() == typeof(System.DBNull) ? null : reader["FromTeamId"]),
                            ToTeamId = (System.Int32?) (reader["ToTeamId"].GetType() == typeof(System.DBNull) ? null : reader["ToTeamId"]),
                            TransferDate = (System.DateTime?) (reader["TransferDate"].GetType() == typeof(System.DBNull) ? null : reader["TransferDate"]),
                            FirstName = (System.String) (reader["FirstName"].GetType() == typeof(System.DBNull) ? null : reader["FirstName"]),
                            Surname = (System.String) (reader["Surname"].GetType() == typeof(System.DBNull) ? null : reader["Surname"]),
                            HeightInCm = (System.Decimal?) (reader["HeightInCm"].GetType() == typeof(System.DBNull) ? null : reader["HeightInCm"]),
                            DateOfBirth = (System.DateTime?) (reader["DateOfBirth"].GetType() == typeof(System.DBNull) ? null : reader["DateOfBirth"]),
                            TeamID = (System.Int32?) (reader["TeamID"].GetType() == typeof(System.DBNull) ? null : reader["TeamID"]),
                            CurrentTeam = (System.String) (reader["CurrentTeam"].GetType() == typeof(System.DBNull) ? null : reader["CurrentTeam"]),
                            ToTeam = (System.String) (reader["ToTeam"].GetType() == typeof(System.DBNull) ? null : reader["ToTeam"]),
                            FromTeam = (System.String) (reader["FromTeam"].GetType() == typeof(System.DBNull) ? null : reader["FromTeam"])
                        };
                        result.Add(item);
                    }
                    _con.Close();
                    @retval = (System.Int32?) (_cmd.Parameters["@retval"].Value.GetType() == typeof(System.DBNull) ? null : _cmd.Parameters["@retval"].Value);

                    return result;
                }
        }

		#endregion ListTransferHistory


				public List<ListTransferHistoryResult> ListTransferHistory
        (
            object model
        ) {
            using(SqlConnection _con = new SqlConnection(ConnectionString))
                using(SqlCommand _cmd = new SqlCommand())
                {

                var type = model.GetType();
                var properties = type.GetProperties().ToList();

					_cmd.CommandTimeout = this.ConnectionTimeout;
                    _cmd.CommandText = "ListTransferHistory";
                    _cmd.CommandType = CommandType.StoredProcedure;
                    _cmd.Connection = _con;                    
                    _cmd.Parameters.Add(new SqlParameter()
                    {
                        ParameterName = "@PlayerId"
                        ,SqlDbType = SqlDbType.Int
                        ,Size = 4
                        ,IsNullable = true
                        ,Value = properties.Where(x => x.Name == "@PlayerId".Replace("@","")).SingleOrDefault() != null ? properties.Where(x => x.Name == "@PlayerId".Replace("@","")).SingleOrDefault().GetValue(model) : null
                        ,Direction = ParameterDirection.Input
                    });
                    _cmd.Parameters.Add(new SqlParameter()
                    {
                        ParameterName = "@TeamId"
                        ,SqlDbType = SqlDbType.Int
                        ,Size = 4
                        ,IsNullable = true
                        ,Value = properties.Where(x => x.Name == "@TeamId".Replace("@","")).SingleOrDefault() != null ? properties.Where(x => x.Name == "@TeamId".Replace("@","")).SingleOrDefault().GetValue(model) : null
                        ,Direction = ParameterDirection.Input
                    });
                    _cmd.Parameters.Add(new SqlParameter()
                    {
                        ParameterName = "@StadiumId"
                        ,SqlDbType = SqlDbType.Int
                        ,Size = 4
                        ,IsNullable = true
                        ,Value = properties.Where(x => x.Name == "@StadiumId".Replace("@","")).SingleOrDefault() != null ? properties.Where(x => x.Name == "@StadiumId".Replace("@","")).SingleOrDefault().GetValue(model) : null
                        ,Direction = ParameterDirection.Input
                    });
                    _cmd.Parameters.Add(new SqlParameter()
                    {
                        ParameterName = "@retval"
                        ,SqlDbType = SqlDbType.Int
                        ,Size = 0
                        ,IsNullable = true
                        ,Value = properties.Where(x => x.Name == "@retval".Replace("@","")).SingleOrDefault() != null ? properties.Where(x => x.Name == "@retval".Replace("@","")).SingleOrDefault().GetValue(model) : null
                        ,Direction = ParameterDirection.ReturnValue
                    });


                    _con.Open();

                    SqlCommand arithCommand = new SqlCommand("SET ARITHABORT ON", _con);
                    arithCommand.ExecuteNonQuery();

                    var reader = _cmd.ExecuteReader();
                    var result = new List<ListTransferHistoryResult>();
                    while(reader.Read())
                    {
                        var item = new ListTransferHistoryResult()
                        {
                            PlayerTransferHistoryId = (System.Int32) (reader["PlayerTransferHistoryId"].GetType() == typeof(System.DBNull) ? null : reader["PlayerTransferHistoryId"]),
                            PlayerId = (System.Int32?) (reader["PlayerId"].GetType() == typeof(System.DBNull) ? null : reader["PlayerId"]),
                            FromTeamId = (System.Int32?) (reader["FromTeamId"].GetType() == typeof(System.DBNull) ? null : reader["FromTeamId"]),
                            ToTeamId = (System.Int32?) (reader["ToTeamId"].GetType() == typeof(System.DBNull) ? null : reader["ToTeamId"]),
                            TransferDate = (System.DateTime?) (reader["TransferDate"].GetType() == typeof(System.DBNull) ? null : reader["TransferDate"]),
                            FirstName = (System.String) (reader["FirstName"].GetType() == typeof(System.DBNull) ? null : reader["FirstName"]),
                            Surname = (System.String) (reader["Surname"].GetType() == typeof(System.DBNull) ? null : reader["Surname"]),
                            HeightInCm = (System.Decimal?) (reader["HeightInCm"].GetType() == typeof(System.DBNull) ? null : reader["HeightInCm"]),
                            DateOfBirth = (System.DateTime?) (reader["DateOfBirth"].GetType() == typeof(System.DBNull) ? null : reader["DateOfBirth"]),
                            TeamID = (System.Int32?) (reader["TeamID"].GetType() == typeof(System.DBNull) ? null : reader["TeamID"]),
                            CurrentTeam = (System.String) (reader["CurrentTeam"].GetType() == typeof(System.DBNull) ? null : reader["CurrentTeam"]),
                            ToTeam = (System.String) (reader["ToTeam"].GetType() == typeof(System.DBNull) ? null : reader["ToTeam"]),
                            FromTeam = (System.String) (reader["FromTeam"].GetType() == typeof(System.DBNull) ? null : reader["FromTeam"])
                        };
                        result.Add(item);
                    }
                    _con.Close();

						if(properties.Where(x => x.Name == "@retval".Replace("@","")).SingleOrDefault() != null)
						{
							properties.Where(x => x.Name == "@retval".Replace("@","")).SingleOrDefault().SetValue(model, (System.Int32?)_cmd.Parameters["@retval"].Value);
						}

                    return result;
                }
        }

		#region TransferPlayer

		public void TransferPlayer
		(
			 System.Int32? @PlayerId,  System.Int32? @ToTeamId,  System.DateTime? @TransferDate, ref System.Int32? @retval
		)
		{
			TransferPlayer
			(
				this.ConnectionString,
				 @PlayerId,  @ToTeamId,  @TransferDate, ref @retval
			);
		}
		public void TransferPlayer
		(
			 System.Int32? @PlayerId,  System.Int32? @ToTeamId,  System.DateTime? @TransferDate
		)
		{
			int? retval = 0;
			TransferPlayer
			(
				this.ConnectionString,
				 @PlayerId,  @ToTeamId,  @TransferDate, ref @retval
			);
		}
        public static void TransferPlayer
        (
            string connectionString,
             System.Int32? @PlayerId,  System.Int32? @ToTeamId,  System.DateTime? @TransferDate, ref System.Int32? @retval
        ) {
            using(SqlConnection _con = new SqlConnection(connectionString))
                using(SqlCommand _cmd = new SqlCommand())
                {
                    _cmd.CommandText = "TransferPlayer";
                    _cmd.CommandType = CommandType.StoredProcedure;
                    _cmd.Connection = _con;                    
                    _cmd.Parameters.Add(new SqlParameter()
                    {
                        ParameterName = "@PlayerId"
                        ,SqlDbType = SqlDbType.Int
                        ,Size = 4
                        ,IsNullable = true
                        ,Value = @PlayerId
                        ,Direction = ParameterDirection.Input
                    });
                    _cmd.Parameters.Add(new SqlParameter()
                    {
                        ParameterName = "@ToTeamId"
                        ,SqlDbType = SqlDbType.Int
                        ,Size = 4
                        ,IsNullable = true
                        ,Value = @ToTeamId
                        ,Direction = ParameterDirection.Input
                    });
                    _cmd.Parameters.Add(new SqlParameter()
                    {
                        ParameterName = "@TransferDate"
                        ,SqlDbType = SqlDbType.DateTime
                        ,Size = 8
                        ,IsNullable = true
                        ,Value = @TransferDate
                        ,Direction = ParameterDirection.Input
                    });
                    _cmd.Parameters.Add(new SqlParameter()
                    {
                        ParameterName = "@retval"
                        ,SqlDbType = SqlDbType.Int
                        ,Size = 0
                        ,IsNullable = true
                        ,Value = @retval
                        ,Direction = ParameterDirection.ReturnValue
                    });

                    _con.Open();

                    SqlCommand arithCommand = new SqlCommand("SET ARITHABORT ON", _con);
                    arithCommand.ExecuteNonQuery();

                    int result = _cmd.ExecuteNonQuery();
                    _con.Close();
                    @retval = (System.Int32?) (_cmd.Parameters["@retval"].Value.GetType() == typeof(System.DBNull) ? null : _cmd.Parameters["@retval"].Value);

                }
        }

		#endregion TransferPlayer


				public void TransferPlayer
        (
            object model
        ) {
            using(SqlConnection _con = new SqlConnection(ConnectionString))
                using(SqlCommand _cmd = new SqlCommand())
                {

                var type = model.GetType();
                var properties = type.GetProperties().ToList();

					_cmd.CommandTimeout = this.ConnectionTimeout;
                    _cmd.CommandText = "TransferPlayer";
                    _cmd.CommandType = CommandType.StoredProcedure;
                    _cmd.Connection = _con;                    
                    _cmd.Parameters.Add(new SqlParameter()
                    {
                        ParameterName = "@PlayerId"
                        ,SqlDbType = SqlDbType.Int
                        ,Size = 4
                        ,IsNullable = true
                        ,Value = properties.Where(x => x.Name == "@PlayerId".Replace("@","")).SingleOrDefault() != null ? properties.Where(x => x.Name == "@PlayerId".Replace("@","")).SingleOrDefault().GetValue(model) : null
                        ,Direction = ParameterDirection.Input
                    });
                    _cmd.Parameters.Add(new SqlParameter()
                    {
                        ParameterName = "@ToTeamId"
                        ,SqlDbType = SqlDbType.Int
                        ,Size = 4
                        ,IsNullable = true
                        ,Value = properties.Where(x => x.Name == "@ToTeamId".Replace("@","")).SingleOrDefault() != null ? properties.Where(x => x.Name == "@ToTeamId".Replace("@","")).SingleOrDefault().GetValue(model) : null
                        ,Direction = ParameterDirection.Input
                    });
                    _cmd.Parameters.Add(new SqlParameter()
                    {
                        ParameterName = "@TransferDate"
                        ,SqlDbType = SqlDbType.DateTime
                        ,Size = 8
                        ,IsNullable = true
                        ,Value = properties.Where(x => x.Name == "@TransferDate".Replace("@","")).SingleOrDefault() != null ? properties.Where(x => x.Name == "@TransferDate".Replace("@","")).SingleOrDefault().GetValue(model) : null
                        ,Direction = ParameterDirection.Input
                    });
                    _cmd.Parameters.Add(new SqlParameter()
                    {
                        ParameterName = "@retval"
                        ,SqlDbType = SqlDbType.Int
                        ,Size = 0
                        ,IsNullable = true
                        ,Value = properties.Where(x => x.Name == "@retval".Replace("@","")).SingleOrDefault() != null ? properties.Where(x => x.Name == "@retval".Replace("@","")).SingleOrDefault().GetValue(model) : null
                        ,Direction = ParameterDirection.ReturnValue
                    });


                    _con.Open();

                    SqlCommand arithCommand = new SqlCommand("SET ARITHABORT ON", _con);
                    arithCommand.ExecuteNonQuery();

                    int result = _cmd.ExecuteNonQuery();
					_con.Close();

						if(properties.Where(x => x.Name == "@retval".Replace("@","")).SingleOrDefault() != null)
						{
							properties.Where(x => x.Name == "@retval".Replace("@","")).SingleOrDefault().SetValue(model, (System.Int32?)_cmd.Parameters["@retval"].Value);
						}

             
                }
        }

		#region UpsertPlayer

		public void UpsertPlayer
		(
			 System.Int32? @PlayerId,  System.String @FirstName,  System.String @Surname,  System.Decimal? @HeightInCm,  System.DateTime? @DateOfBirth,  System.String @TeamName, ref System.Int32? @retval
		)
		{
			UpsertPlayer
			(
				this.ConnectionString,
				 @PlayerId,  @FirstName,  @Surname,  @HeightInCm,  @DateOfBirth,  @TeamName, ref @retval
			);
		}
		public void UpsertPlayer
		(
			 System.Int32? @PlayerId,  System.String @FirstName,  System.String @Surname,  System.Decimal? @HeightInCm,  System.DateTime? @DateOfBirth,  System.String @TeamName
		)
		{
			int? retval = 0;
			UpsertPlayer
			(
				this.ConnectionString,
				 @PlayerId,  @FirstName,  @Surname,  @HeightInCm,  @DateOfBirth,  @TeamName, ref @retval
			);
		}
        public static void UpsertPlayer
        (
            string connectionString,
             System.Int32? @PlayerId,  System.String @FirstName,  System.String @Surname,  System.Decimal? @HeightInCm,  System.DateTime? @DateOfBirth,  System.String @TeamName, ref System.Int32? @retval
        ) {
            using(SqlConnection _con = new SqlConnection(connectionString))
                using(SqlCommand _cmd = new SqlCommand())
                {
                    _cmd.CommandText = "UpsertPlayer";
                    _cmd.CommandType = CommandType.StoredProcedure;
                    _cmd.Connection = _con;                    
                    _cmd.Parameters.Add(new SqlParameter()
                    {
                        ParameterName = "@PlayerId"
                        ,SqlDbType = SqlDbType.Int
                        ,Size = 4
                        ,IsNullable = true
                        ,Value = @PlayerId
                        ,Direction = ParameterDirection.Input
                    });
                    _cmd.Parameters.Add(new SqlParameter()
                    {
                        ParameterName = "@FirstName"
                        ,SqlDbType = SqlDbType.VarChar
                        ,Size = 100
                        ,IsNullable = true
                        ,Value = @FirstName
                        ,Direction = ParameterDirection.Input
                    });
                    _cmd.Parameters.Add(new SqlParameter()
                    {
                        ParameterName = "@Surname"
                        ,SqlDbType = SqlDbType.VarChar
                        ,Size = 100
                        ,IsNullable = true
                        ,Value = @Surname
                        ,Direction = ParameterDirection.Input
                    });
                    _cmd.Parameters.Add(new SqlParameter()
                    {
                        ParameterName = "@HeightInCm"
                        ,SqlDbType = SqlDbType.Decimal
                        ,Size = 9
                        ,IsNullable = true
                        ,Value = @HeightInCm
                        ,Direction = ParameterDirection.Input
                    });
                    _cmd.Parameters.Add(new SqlParameter()
                    {
                        ParameterName = "@DateOfBirth"
                        ,SqlDbType = SqlDbType.DateTime
                        ,Size = 8
                        ,IsNullable = true
                        ,Value = @DateOfBirth
                        ,Direction = ParameterDirection.Input
                    });
                    _cmd.Parameters.Add(new SqlParameter()
                    {
                        ParameterName = "@TeamName"
                        ,SqlDbType = SqlDbType.VarChar
                        ,Size = 100
                        ,IsNullable = true
                        ,Value = @TeamName
                        ,Direction = ParameterDirection.Input
                    });
                    _cmd.Parameters.Add(new SqlParameter()
                    {
                        ParameterName = "@retval"
                        ,SqlDbType = SqlDbType.Int
                        ,Size = 0
                        ,IsNullable = true
                        ,Value = @retval
                        ,Direction = ParameterDirection.ReturnValue
                    });

                    _con.Open();

                    SqlCommand arithCommand = new SqlCommand("SET ARITHABORT ON", _con);
                    arithCommand.ExecuteNonQuery();

                    int result = _cmd.ExecuteNonQuery();
                    _con.Close();
                    @retval = (System.Int32?) (_cmd.Parameters["@retval"].Value.GetType() == typeof(System.DBNull) ? null : _cmd.Parameters["@retval"].Value);

                }
        }

		#endregion UpsertPlayer


				public void UpsertPlayer
        (
            object model
        ) {
            using(SqlConnection _con = new SqlConnection(ConnectionString))
                using(SqlCommand _cmd = new SqlCommand())
                {

                var type = model.GetType();
                var properties = type.GetProperties().ToList();

					_cmd.CommandTimeout = this.ConnectionTimeout;
                    _cmd.CommandText = "UpsertPlayer";
                    _cmd.CommandType = CommandType.StoredProcedure;
                    _cmd.Connection = _con;                    
                    _cmd.Parameters.Add(new SqlParameter()
                    {
                        ParameterName = "@PlayerId"
                        ,SqlDbType = SqlDbType.Int
                        ,Size = 4
                        ,IsNullable = true
                        ,Value = properties.Where(x => x.Name == "@PlayerId".Replace("@","")).SingleOrDefault() != null ? properties.Where(x => x.Name == "@PlayerId".Replace("@","")).SingleOrDefault().GetValue(model) : null
                        ,Direction = ParameterDirection.Input
                    });
                    _cmd.Parameters.Add(new SqlParameter()
                    {
                        ParameterName = "@FirstName"
                        ,SqlDbType = SqlDbType.VarChar
                        ,Size = 100
                        ,IsNullable = true
                        ,Value = properties.Where(x => x.Name == "@FirstName".Replace("@","")).SingleOrDefault() != null ? properties.Where(x => x.Name == "@FirstName".Replace("@","")).SingleOrDefault().GetValue(model) : null
                        ,Direction = ParameterDirection.Input
                    });
                    _cmd.Parameters.Add(new SqlParameter()
                    {
                        ParameterName = "@Surname"
                        ,SqlDbType = SqlDbType.VarChar
                        ,Size = 100
                        ,IsNullable = true
                        ,Value = properties.Where(x => x.Name == "@Surname".Replace("@","")).SingleOrDefault() != null ? properties.Where(x => x.Name == "@Surname".Replace("@","")).SingleOrDefault().GetValue(model) : null
                        ,Direction = ParameterDirection.Input
                    });
                    _cmd.Parameters.Add(new SqlParameter()
                    {
                        ParameterName = "@HeightInCm"
                        ,SqlDbType = SqlDbType.Decimal
                        ,Size = 9
                        ,IsNullable = true
                        ,Value = properties.Where(x => x.Name == "@HeightInCm".Replace("@","")).SingleOrDefault() != null ? properties.Where(x => x.Name == "@HeightInCm".Replace("@","")).SingleOrDefault().GetValue(model) : null
                        ,Direction = ParameterDirection.Input
                    });
                    _cmd.Parameters.Add(new SqlParameter()
                    {
                        ParameterName = "@DateOfBirth"
                        ,SqlDbType = SqlDbType.DateTime
                        ,Size = 8
                        ,IsNullable = true
                        ,Value = properties.Where(x => x.Name == "@DateOfBirth".Replace("@","")).SingleOrDefault() != null ? properties.Where(x => x.Name == "@DateOfBirth".Replace("@","")).SingleOrDefault().GetValue(model) : null
                        ,Direction = ParameterDirection.Input
                    });
                    _cmd.Parameters.Add(new SqlParameter()
                    {
                        ParameterName = "@TeamName"
                        ,SqlDbType = SqlDbType.VarChar
                        ,Size = 100
                        ,IsNullable = true
                        ,Value = properties.Where(x => x.Name == "@TeamName".Replace("@","")).SingleOrDefault() != null ? properties.Where(x => x.Name == "@TeamName".Replace("@","")).SingleOrDefault().GetValue(model) : null
                        ,Direction = ParameterDirection.Input
                    });
                    _cmd.Parameters.Add(new SqlParameter()
                    {
                        ParameterName = "@retval"
                        ,SqlDbType = SqlDbType.Int
                        ,Size = 0
                        ,IsNullable = true
                        ,Value = properties.Where(x => x.Name == "@retval".Replace("@","")).SingleOrDefault() != null ? properties.Where(x => x.Name == "@retval".Replace("@","")).SingleOrDefault().GetValue(model) : null
                        ,Direction = ParameterDirection.ReturnValue
                    });


                    _con.Open();

                    SqlCommand arithCommand = new SqlCommand("SET ARITHABORT ON", _con);
                    arithCommand.ExecuteNonQuery();

                    int result = _cmd.ExecuteNonQuery();
					_con.Close();

						if(properties.Where(x => x.Name == "@retval".Replace("@","")).SingleOrDefault() != null)
						{
							properties.Where(x => x.Name == "@retval".Replace("@","")).SingleOrDefault().SetValue(model, (System.Int32?)_cmd.Parameters["@retval"].Value);
						}

             
                }
        }

		#region UpsertStadium

		public void UpsertStadium
		(
			 System.Int32? @StadiumId,  System.String @Name,  System.String @Location, ref System.Int32? @retval
		)
		{
			UpsertStadium
			(
				this.ConnectionString,
				 @StadiumId,  @Name,  @Location, ref @retval
			);
		}
		public void UpsertStadium
		(
			 System.Int32? @StadiumId,  System.String @Name,  System.String @Location
		)
		{
			int? retval = 0;
			UpsertStadium
			(
				this.ConnectionString,
				 @StadiumId,  @Name,  @Location, ref @retval
			);
		}
        public static void UpsertStadium
        (
            string connectionString,
             System.Int32? @StadiumId,  System.String @Name,  System.String @Location, ref System.Int32? @retval
        ) {
            using(SqlConnection _con = new SqlConnection(connectionString))
                using(SqlCommand _cmd = new SqlCommand())
                {
                    _cmd.CommandText = "UpsertStadium";
                    _cmd.CommandType = CommandType.StoredProcedure;
                    _cmd.Connection = _con;                    
                    _cmd.Parameters.Add(new SqlParameter()
                    {
                        ParameterName = "@StadiumId"
                        ,SqlDbType = SqlDbType.Int
                        ,Size = 4
                        ,IsNullable = true
                        ,Value = @StadiumId
                        ,Direction = ParameterDirection.Input
                    });
                    _cmd.Parameters.Add(new SqlParameter()
                    {
                        ParameterName = "@Name"
                        ,SqlDbType = SqlDbType.VarChar
                        ,Size = 100
                        ,IsNullable = true
                        ,Value = @Name
                        ,Direction = ParameterDirection.Input
                    });
                    _cmd.Parameters.Add(new SqlParameter()
                    {
                        ParameterName = "@Location"
                        ,SqlDbType = SqlDbType.VarChar
                        ,Size = 100
                        ,IsNullable = true
                        ,Value = @Location
                        ,Direction = ParameterDirection.Input
                    });
                    _cmd.Parameters.Add(new SqlParameter()
                    {
                        ParameterName = "@retval"
                        ,SqlDbType = SqlDbType.Int
                        ,Size = 0
                        ,IsNullable = true
                        ,Value = @retval
                        ,Direction = ParameterDirection.ReturnValue
                    });

                    _con.Open();

                    SqlCommand arithCommand = new SqlCommand("SET ARITHABORT ON", _con);
                    arithCommand.ExecuteNonQuery();

                    int result = _cmd.ExecuteNonQuery();
                    _con.Close();
                    @retval = (System.Int32?) (_cmd.Parameters["@retval"].Value.GetType() == typeof(System.DBNull) ? null : _cmd.Parameters["@retval"].Value);

                }
        }

		#endregion UpsertStadium


				public void UpsertStadium
        (
            object model
        ) {
            using(SqlConnection _con = new SqlConnection(ConnectionString))
                using(SqlCommand _cmd = new SqlCommand())
                {

                var type = model.GetType();
                var properties = type.GetProperties().ToList();

					_cmd.CommandTimeout = this.ConnectionTimeout;
                    _cmd.CommandText = "UpsertStadium";
                    _cmd.CommandType = CommandType.StoredProcedure;
                    _cmd.Connection = _con;                    
                    _cmd.Parameters.Add(new SqlParameter()
                    {
                        ParameterName = "@StadiumId"
                        ,SqlDbType = SqlDbType.Int
                        ,Size = 4
                        ,IsNullable = true
                        ,Value = properties.Where(x => x.Name == "@StadiumId".Replace("@","")).SingleOrDefault() != null ? properties.Where(x => x.Name == "@StadiumId".Replace("@","")).SingleOrDefault().GetValue(model) : null
                        ,Direction = ParameterDirection.Input
                    });
                    _cmd.Parameters.Add(new SqlParameter()
                    {
                        ParameterName = "@Name"
                        ,SqlDbType = SqlDbType.VarChar
                        ,Size = 100
                        ,IsNullable = true
                        ,Value = properties.Where(x => x.Name == "@Name".Replace("@","")).SingleOrDefault() != null ? properties.Where(x => x.Name == "@Name".Replace("@","")).SingleOrDefault().GetValue(model) : null
                        ,Direction = ParameterDirection.Input
                    });
                    _cmd.Parameters.Add(new SqlParameter()
                    {
                        ParameterName = "@Location"
                        ,SqlDbType = SqlDbType.VarChar
                        ,Size = 100
                        ,IsNullable = true
                        ,Value = properties.Where(x => x.Name == "@Location".Replace("@","")).SingleOrDefault() != null ? properties.Where(x => x.Name == "@Location".Replace("@","")).SingleOrDefault().GetValue(model) : null
                        ,Direction = ParameterDirection.Input
                    });
                    _cmd.Parameters.Add(new SqlParameter()
                    {
                        ParameterName = "@retval"
                        ,SqlDbType = SqlDbType.Int
                        ,Size = 0
                        ,IsNullable = true
                        ,Value = properties.Where(x => x.Name == "@retval".Replace("@","")).SingleOrDefault() != null ? properties.Where(x => x.Name == "@retval".Replace("@","")).SingleOrDefault().GetValue(model) : null
                        ,Direction = ParameterDirection.ReturnValue
                    });


                    _con.Open();

                    SqlCommand arithCommand = new SqlCommand("SET ARITHABORT ON", _con);
                    arithCommand.ExecuteNonQuery();

                    int result = _cmd.ExecuteNonQuery();
					_con.Close();

						if(properties.Where(x => x.Name == "@retval".Replace("@","")).SingleOrDefault() != null)
						{
							properties.Where(x => x.Name == "@retval".Replace("@","")).SingleOrDefault().SetValue(model, (System.Int32?)_cmd.Parameters["@retval"].Value);
						}

             
                }
        }

		#region UpsertTeam

		public void UpsertTeam
		(
			 System.Int32? @TeamId,  System.String @Name,  System.String @StadiumName, ref System.Int32? @retval
		)
		{
			UpsertTeam
			(
				this.ConnectionString,
				 @TeamId,  @Name,  @StadiumName, ref @retval
			);
		}
		public void UpsertTeam
		(
			 System.Int32? @TeamId,  System.String @Name,  System.String @StadiumName
		)
		{
			int? retval = 0;
			UpsertTeam
			(
				this.ConnectionString,
				 @TeamId,  @Name,  @StadiumName, ref @retval
			);
		}
        public static void UpsertTeam
        (
            string connectionString,
             System.Int32? @TeamId,  System.String @Name,  System.String @StadiumName, ref System.Int32? @retval
        ) {
            using(SqlConnection _con = new SqlConnection(connectionString))
                using(SqlCommand _cmd = new SqlCommand())
                {
                    _cmd.CommandText = "UpsertTeam";
                    _cmd.CommandType = CommandType.StoredProcedure;
                    _cmd.Connection = _con;                    
                    _cmd.Parameters.Add(new SqlParameter()
                    {
                        ParameterName = "@TeamId"
                        ,SqlDbType = SqlDbType.Int
                        ,Size = 4
                        ,IsNullable = true
                        ,Value = @TeamId
                        ,Direction = ParameterDirection.Input
                    });
                    _cmd.Parameters.Add(new SqlParameter()
                    {
                        ParameterName = "@Name"
                        ,SqlDbType = SqlDbType.VarChar
                        ,Size = 100
                        ,IsNullable = true
                        ,Value = @Name
                        ,Direction = ParameterDirection.Input
                    });
                    _cmd.Parameters.Add(new SqlParameter()
                    {
                        ParameterName = "@StadiumName"
                        ,SqlDbType = SqlDbType.VarChar
                        ,Size = 100
                        ,IsNullable = true
                        ,Value = @StadiumName
                        ,Direction = ParameterDirection.Input
                    });
                    _cmd.Parameters.Add(new SqlParameter()
                    {
                        ParameterName = "@retval"
                        ,SqlDbType = SqlDbType.Int
                        ,Size = 0
                        ,IsNullable = true
                        ,Value = @retval
                        ,Direction = ParameterDirection.ReturnValue
                    });

                    _con.Open();

                    SqlCommand arithCommand = new SqlCommand("SET ARITHABORT ON", _con);
                    arithCommand.ExecuteNonQuery();

                    int result = _cmd.ExecuteNonQuery();
                    _con.Close();
                    @retval = (System.Int32?) (_cmd.Parameters["@retval"].Value.GetType() == typeof(System.DBNull) ? null : _cmd.Parameters["@retval"].Value);

                }
        }

		#endregion UpsertTeam


				public void UpsertTeam
        (
            object model
        ) {
            using(SqlConnection _con = new SqlConnection(ConnectionString))
                using(SqlCommand _cmd = new SqlCommand())
                {

                var type = model.GetType();
                var properties = type.GetProperties().ToList();

					_cmd.CommandTimeout = this.ConnectionTimeout;
                    _cmd.CommandText = "UpsertTeam";
                    _cmd.CommandType = CommandType.StoredProcedure;
                    _cmd.Connection = _con;                    
                    _cmd.Parameters.Add(new SqlParameter()
                    {
                        ParameterName = "@TeamId"
                        ,SqlDbType = SqlDbType.Int
                        ,Size = 4
                        ,IsNullable = true
                        ,Value = properties.Where(x => x.Name == "@TeamId".Replace("@","")).SingleOrDefault() != null ? properties.Where(x => x.Name == "@TeamId".Replace("@","")).SingleOrDefault().GetValue(model) : null
                        ,Direction = ParameterDirection.Input
                    });
                    _cmd.Parameters.Add(new SqlParameter()
                    {
                        ParameterName = "@Name"
                        ,SqlDbType = SqlDbType.VarChar
                        ,Size = 100
                        ,IsNullable = true
                        ,Value = properties.Where(x => x.Name == "@Name".Replace("@","")).SingleOrDefault() != null ? properties.Where(x => x.Name == "@Name".Replace("@","")).SingleOrDefault().GetValue(model) : null
                        ,Direction = ParameterDirection.Input
                    });
                    _cmd.Parameters.Add(new SqlParameter()
                    {
                        ParameterName = "@StadiumName"
                        ,SqlDbType = SqlDbType.VarChar
                        ,Size = 100
                        ,IsNullable = true
                        ,Value = properties.Where(x => x.Name == "@StadiumName".Replace("@","")).SingleOrDefault() != null ? properties.Where(x => x.Name == "@StadiumName".Replace("@","")).SingleOrDefault().GetValue(model) : null
                        ,Direction = ParameterDirection.Input
                    });
                    _cmd.Parameters.Add(new SqlParameter()
                    {
                        ParameterName = "@retval"
                        ,SqlDbType = SqlDbType.Int
                        ,Size = 0
                        ,IsNullable = true
                        ,Value = properties.Where(x => x.Name == "@retval".Replace("@","")).SingleOrDefault() != null ? properties.Where(x => x.Name == "@retval".Replace("@","")).SingleOrDefault().GetValue(model) : null
                        ,Direction = ParameterDirection.ReturnValue
                    });


                    _con.Open();

                    SqlCommand arithCommand = new SqlCommand("SET ARITHABORT ON", _con);
                    arithCommand.ExecuteNonQuery();

                    int result = _cmd.ExecuteNonQuery();
					_con.Close();

						if(properties.Where(x => x.Name == "@retval".Replace("@","")).SingleOrDefault() != null)
						{
							properties.Where(x => x.Name == "@retval".Replace("@","")).SingleOrDefault().SetValue(model, (System.Int32?)_cmd.Parameters["@retval"].Value);
						}

             
                }
        }

		#region ListStadiums

        public List<ListStadiumsResult> ListStadiums
		(
            ref System.Int32? @retval
		)
		{
			return ListStadiums
			(
				this.ConnectionString,
				ref @retval
			);
		}
        public List<ListStadiumsResult> ListStadiums
		(
            
		)
		{
			int? retval = 0;			
			return ListStadiums
			(
				this.ConnectionString,
				ref @retval
			);
		}
		public static List<ListStadiumsResult> ListStadiums
        (
            string connectionString,
            ref System.Int32? @retval
        ) {
            using(SqlConnection _con = new SqlConnection(connectionString))
                using(SqlCommand _cmd = new SqlCommand())
                {
                    _cmd.CommandText = "ListStadiums";
                    _cmd.CommandType = CommandType.StoredProcedure;
					_cmd.CommandTimeout = _ConnectionTimeout;
                    _cmd.Connection = _con;                    
                    _cmd.Parameters.Add(new SqlParameter()
                    {
                        ParameterName = "@retval"
                        ,SqlDbType = SqlDbType.Int
                        ,Size = 0
                        ,IsNullable = true
                        ,Value = @retval
                        ,Direction = ParameterDirection.ReturnValue
                    });

                    _con.Open();

                    SqlCommand arithCommand = new SqlCommand("SET ARITHABORT ON", _con);
                    arithCommand.ExecuteNonQuery();

                    var reader = _cmd.ExecuteReader();
                    var result = new List<ListStadiumsResult>();
                    while(reader.Read())
                    {
                        var item = new ListStadiumsResult()
                        {
                            StadiumId = (System.Int32) (reader["StadiumId"].GetType() == typeof(System.DBNull) ? null : reader["StadiumId"]),
                            Name = (System.String) (reader["Name"].GetType() == typeof(System.DBNull) ? null : reader["Name"]),
                            Location = (System.String) (reader["Location"].GetType() == typeof(System.DBNull) ? null : reader["Location"])
                        };
                        result.Add(item);
                    }
                    _con.Close();
                    @retval = (System.Int32?) (_cmd.Parameters["@retval"].Value.GetType() == typeof(System.DBNull) ? null : _cmd.Parameters["@retval"].Value);

                    return result;
                }
        }

		#endregion ListStadiums


				public List<ListStadiumsResult> ListStadiums
        (
            object model
        ) {
            using(SqlConnection _con = new SqlConnection(ConnectionString))
                using(SqlCommand _cmd = new SqlCommand())
                {

                var type = model.GetType();
                var properties = type.GetProperties().ToList();

					_cmd.CommandTimeout = this.ConnectionTimeout;
                    _cmd.CommandText = "ListStadiums";
                    _cmd.CommandType = CommandType.StoredProcedure;
                    _cmd.Connection = _con;                    
                    _cmd.Parameters.Add(new SqlParameter()
                    {
                        ParameterName = "@retval"
                        ,SqlDbType = SqlDbType.Int
                        ,Size = 0
                        ,IsNullable = true
                        ,Value = properties.Where(x => x.Name == "@retval".Replace("@","")).SingleOrDefault() != null ? properties.Where(x => x.Name == "@retval".Replace("@","")).SingleOrDefault().GetValue(model) : null
                        ,Direction = ParameterDirection.ReturnValue
                    });


                    _con.Open();

                    SqlCommand arithCommand = new SqlCommand("SET ARITHABORT ON", _con);
                    arithCommand.ExecuteNonQuery();

                    var reader = _cmd.ExecuteReader();
                    var result = new List<ListStadiumsResult>();
                    while(reader.Read())
                    {
                        var item = new ListStadiumsResult()
                        {
                            StadiumId = (System.Int32) (reader["StadiumId"].GetType() == typeof(System.DBNull) ? null : reader["StadiumId"]),
                            Name = (System.String) (reader["Name"].GetType() == typeof(System.DBNull) ? null : reader["Name"]),
                            Location = (System.String) (reader["Location"].GetType() == typeof(System.DBNull) ? null : reader["Location"])
                        };
                        result.Add(item);
                    }
                    _con.Close();

						if(properties.Where(x => x.Name == "@retval".Replace("@","")).SingleOrDefault() != null)
						{
							properties.Where(x => x.Name == "@retval".Replace("@","")).SingleOrDefault().SetValue(model, (System.Int32?)_cmd.Parameters["@retval"].Value);
						}

                    return result;
                }
        }


    }
}