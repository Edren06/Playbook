using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using System.Linq;

// SqlProxyClassGen: This code was auto-generated by a tool.
// Generated on 2023/02/10 10:25:13.
namespace CoinJar
{
    public partial class DbObjects
    {
		#region Header
		public string ConnectionString;

		public static int _ConnectionTimeout = 30;
		public int ConnectionTimeout
		{
			get
			{
				return _ConnectionTimeout;
			}
			set
			{
				_ConnectionTimeout = value;
			}
		}

		public DbObjects(string connectionString)
		{
			this.ConnectionString = connectionString;
		}
		#endregion Header
		#region AddCoinToCoinJar

		public void AddCoinToCoinJar
		(
			 System.Decimal? @Amount,  System.Decimal? @Volume, ref System.Int32? @retval
		)
		{
			AddCoinToCoinJar
			(
				this.ConnectionString,
				 @Amount,  @Volume, ref @retval
			);
		}
		public void AddCoinToCoinJar
		(
			 System.Decimal? @Amount,  System.Decimal? @Volume
		)
		{
			int? retval = 0;
			AddCoinToCoinJar
			(
				this.ConnectionString,
				 @Amount,  @Volume, ref @retval
			);
		}
        public static void AddCoinToCoinJar
        (
            string connectionString,
             System.Decimal? @Amount,  System.Decimal? @Volume, ref System.Int32? @retval
        ) {
            using(SqlConnection _con = new SqlConnection(connectionString))
                using(SqlCommand _cmd = new SqlCommand())
                {
                    _cmd.CommandText = "AddCoinToCoinJar";
                    _cmd.CommandType = CommandType.StoredProcedure;
                    _cmd.Connection = _con;                    
                    _cmd.Parameters.Add(new SqlParameter()
                    {
                        ParameterName = "@Amount"
                        ,SqlDbType = SqlDbType.Decimal
                        ,Size = 9
                        ,IsNullable = true
                        ,Value = @Amount
                        ,Direction = ParameterDirection.Input
                    });
                    _cmd.Parameters.Add(new SqlParameter()
                    {
                        ParameterName = "@Volume"
                        ,SqlDbType = SqlDbType.Decimal
                        ,Size = 9
                        ,IsNullable = true
                        ,Value = @Volume
                        ,Direction = ParameterDirection.Input
                    });
                    _cmd.Parameters.Add(new SqlParameter()
                    {
                        ParameterName = "@retval"
                        ,SqlDbType = SqlDbType.Int
                        ,Size = 0
                        ,IsNullable = true
                        ,Value = @retval
                        ,Direction = ParameterDirection.ReturnValue
                    });

                    _con.Open();

                    SqlCommand arithCommand = new SqlCommand("SET ARITHABORT ON", _con);
                    arithCommand.ExecuteNonQuery();

                    int result = _cmd.ExecuteNonQuery();
                    _con.Close();
                    @retval = (System.Int32?) (_cmd.Parameters["@retval"].Value.GetType() == typeof(System.DBNull) ? null : _cmd.Parameters["@retval"].Value);

                }
        }

		#endregion AddCoinToCoinJar


				public void AddCoinToCoinJar
        (
            object model
        ) {
            using(SqlConnection _con = new SqlConnection(ConnectionString))
                using(SqlCommand _cmd = new SqlCommand())
                {

                var type = model.GetType();
                var properties = type.GetProperties().ToList();

					_cmd.CommandTimeout = this.ConnectionTimeout;
                    _cmd.CommandText = "AddCoinToCoinJar";
                    _cmd.CommandType = CommandType.StoredProcedure;
                    _cmd.Connection = _con;                    
                    _cmd.Parameters.Add(new SqlParameter()
                    {
                        ParameterName = "@Amount"
                        ,SqlDbType = SqlDbType.Decimal
                        ,Size = 9
                        ,IsNullable = true
                        ,Value = properties.Where(x => x.Name == "@Amount".Replace("@","")).SingleOrDefault() != null ? properties.Where(x => x.Name == "@Amount".Replace("@","")).SingleOrDefault().GetValue(model) : null
                        ,Direction = ParameterDirection.Input
                    });
                    _cmd.Parameters.Add(new SqlParameter()
                    {
                        ParameterName = "@Volume"
                        ,SqlDbType = SqlDbType.Decimal
                        ,Size = 9
                        ,IsNullable = true
                        ,Value = properties.Where(x => x.Name == "@Volume".Replace("@","")).SingleOrDefault() != null ? properties.Where(x => x.Name == "@Volume".Replace("@","")).SingleOrDefault().GetValue(model) : null
                        ,Direction = ParameterDirection.Input
                    });
                    _cmd.Parameters.Add(new SqlParameter()
                    {
                        ParameterName = "@retval"
                        ,SqlDbType = SqlDbType.Int
                        ,Size = 0
                        ,IsNullable = true
                        ,Value = properties.Where(x => x.Name == "@retval".Replace("@","")).SingleOrDefault() != null ? properties.Where(x => x.Name == "@retval".Replace("@","")).SingleOrDefault().GetValue(model) : null
                        ,Direction = ParameterDirection.ReturnValue
                    });


                    _con.Open();

                    SqlCommand arithCommand = new SqlCommand("SET ARITHABORT ON", _con);
                    arithCommand.ExecuteNonQuery();

                    int result = _cmd.ExecuteNonQuery();
					_con.Close();

						if(properties.Where(x => x.Name == "@retval".Replace("@","")).SingleOrDefault() != null)
						{
							properties.Where(x => x.Name == "@retval".Replace("@","")).SingleOrDefault().SetValue(model, (System.Int32?)_cmd.Parameters["@retval"].Value);
						}

             
                }
        }

		#region GetCoinJar

        public List<GetCoinJarResult> GetCoinJar
		(
            ref System.Int32? @retval
		)
		{
			return GetCoinJar
			(
				this.ConnectionString,
				ref @retval
			);
		}
        public List<GetCoinJarResult> GetCoinJar
		(
            
		)
		{
			int? retval = 0;			
			return GetCoinJar
			(
				this.ConnectionString,
				ref @retval
			);
		}
		public static List<GetCoinJarResult> GetCoinJar
        (
            string connectionString,
            ref System.Int32? @retval
        ) {
            using(SqlConnection _con = new SqlConnection(connectionString))
                using(SqlCommand _cmd = new SqlCommand())
                {
                    _cmd.CommandText = "GetCoinJar";
                    _cmd.CommandType = CommandType.StoredProcedure;
					_cmd.CommandTimeout = _ConnectionTimeout;
                    _cmd.Connection = _con;                    
                    _cmd.Parameters.Add(new SqlParameter()
                    {
                        ParameterName = "@retval"
                        ,SqlDbType = SqlDbType.Int
                        ,Size = 0
                        ,IsNullable = true
                        ,Value = @retval
                        ,Direction = ParameterDirection.ReturnValue
                    });

                    _con.Open();

                    SqlCommand arithCommand = new SqlCommand("SET ARITHABORT ON", _con);
                    arithCommand.ExecuteNonQuery();

                    var reader = _cmd.ExecuteReader();
                    var result = new List<GetCoinJarResult>();
                    while(reader.Read())
                    {
                        var item = new GetCoinJarResult()
                        {
                            Amount = (System.Int32) (reader["Amount"].GetType() == typeof(System.DBNull) ? null : reader["Amount"]),
                            Volume = (System.Decimal?) (reader["Volume"].GetType() == typeof(System.DBNull) ? null : reader["Volume"])
                        };
                        result.Add(item);
                    }
                    _con.Close();
                    @retval = (System.Int32?) (_cmd.Parameters["@retval"].Value.GetType() == typeof(System.DBNull) ? null : _cmd.Parameters["@retval"].Value);

                    return result;
                }
        }

		#endregion GetCoinJar


				public List<GetCoinJarResult> GetCoinJar
        (
            object model
        ) {
            using(SqlConnection _con = new SqlConnection(ConnectionString))
                using(SqlCommand _cmd = new SqlCommand())
                {

                var type = model.GetType();
                var properties = type.GetProperties().ToList();

					_cmd.CommandTimeout = this.ConnectionTimeout;
                    _cmd.CommandText = "GetCoinJar";
                    _cmd.CommandType = CommandType.StoredProcedure;
                    _cmd.Connection = _con;                    
                    _cmd.Parameters.Add(new SqlParameter()
                    {
                        ParameterName = "@retval"
                        ,SqlDbType = SqlDbType.Int
                        ,Size = 0
                        ,IsNullable = true
                        ,Value = properties.Where(x => x.Name == "@retval".Replace("@","")).SingleOrDefault() != null ? properties.Where(x => x.Name == "@retval".Replace("@","")).SingleOrDefault().GetValue(model) : null
                        ,Direction = ParameterDirection.ReturnValue
                    });


                    _con.Open();

                    SqlCommand arithCommand = new SqlCommand("SET ARITHABORT ON", _con);
                    arithCommand.ExecuteNonQuery();

                    var reader = _cmd.ExecuteReader();
                    var result = new List<GetCoinJarResult>();
                    while(reader.Read())
                    {
                        var item = new GetCoinJarResult()
                        {
                            Amount = (System.Int32) (reader["Amount"].GetType() == typeof(System.DBNull) ? null : reader["Amount"]),
                            Volume = (System.Decimal?) (reader["Volume"].GetType() == typeof(System.DBNull) ? null : reader["Volume"])
                        };
                        result.Add(item);
                    }
                    _con.Close();

						if(properties.Where(x => x.Name == "@retval".Replace("@","")).SingleOrDefault() != null)
						{
							properties.Where(x => x.Name == "@retval".Replace("@","")).SingleOrDefault().SetValue(model, (System.Int32?)_cmd.Parameters["@retval"].Value);
						}

                    return result;
                }
        }

		#region ResetCoinJar

		public void ResetCoinJar
		(
			ref System.Int32? @retval
		)
		{
			ResetCoinJar
			(
				this.ConnectionString,
				ref @retval
			);
		}
		public void ResetCoinJar
		(
			
		)
		{
			int? retval = 0;
			ResetCoinJar
			(
				this.ConnectionString,
				ref @retval
			);
		}
        public static void ResetCoinJar
        (
            string connectionString,
            ref System.Int32? @retval
        ) {
            using(SqlConnection _con = new SqlConnection(connectionString))
                using(SqlCommand _cmd = new SqlCommand())
                {
                    _cmd.CommandText = "ResetCoinJar";
                    _cmd.CommandType = CommandType.StoredProcedure;
                    _cmd.Connection = _con;                    
                    _cmd.Parameters.Add(new SqlParameter()
                    {
                        ParameterName = "@retval"
                        ,SqlDbType = SqlDbType.Int
                        ,Size = 0
                        ,IsNullable = true
                        ,Value = @retval
                        ,Direction = ParameterDirection.ReturnValue
                    });

                    _con.Open();

                    SqlCommand arithCommand = new SqlCommand("SET ARITHABORT ON", _con);
                    arithCommand.ExecuteNonQuery();

                    int result = _cmd.ExecuteNonQuery();
                    _con.Close();
                    @retval = (System.Int32?) (_cmd.Parameters["@retval"].Value.GetType() == typeof(System.DBNull) ? null : _cmd.Parameters["@retval"].Value);

                }
        }

		#endregion ResetCoinJar


				public void ResetCoinJar
        (
            object model
        ) {
            using(SqlConnection _con = new SqlConnection(ConnectionString))
                using(SqlCommand _cmd = new SqlCommand())
                {

                var type = model.GetType();
                var properties = type.GetProperties().ToList();

					_cmd.CommandTimeout = this.ConnectionTimeout;
                    _cmd.CommandText = "ResetCoinJar";
                    _cmd.CommandType = CommandType.StoredProcedure;
                    _cmd.Connection = _con;                    
                    _cmd.Parameters.Add(new SqlParameter()
                    {
                        ParameterName = "@retval"
                        ,SqlDbType = SqlDbType.Int
                        ,Size = 0
                        ,IsNullable = true
                        ,Value = properties.Where(x => x.Name == "@retval".Replace("@","")).SingleOrDefault() != null ? properties.Where(x => x.Name == "@retval".Replace("@","")).SingleOrDefault().GetValue(model) : null
                        ,Direction = ParameterDirection.ReturnValue
                    });


                    _con.Open();

                    SqlCommand arithCommand = new SqlCommand("SET ARITHABORT ON", _con);
                    arithCommand.ExecuteNonQuery();

                    int result = _cmd.ExecuteNonQuery();
					_con.Close();

						if(properties.Where(x => x.Name == "@retval".Replace("@","")).SingleOrDefault() != null)
						{
							properties.Where(x => x.Name == "@retval".Replace("@","")).SingleOrDefault().SetValue(model, (System.Int32?)_cmd.Parameters["@retval"].Value);
						}

             
                }
        }


    }
}